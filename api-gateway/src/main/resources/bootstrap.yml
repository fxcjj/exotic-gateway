server:
  port: 9768

service-url:
  user1-service: http://localhost:9766

spring:
  application:
    name: api-gateway
  redis:
    # redis服务器地址
    host: 192.168.6.131
    # redis访问端口
    port: 6379
    # 数据库索引，默认为0
    database: 4
    # redis服务器连接密码
#    password: root
    # 连接超时时间（毫秒）
    timeout: 10000ms
    # lettuce客户端配置， 加入下面配置 报错：Caused by: java.lang.ClassNotFoundException: org.apache.commons.pool2.impl.GenericObjectPoolConfig
#    lettuce:
#      pool:
#        # 连接池中可分配的最大连接数
#        # Maximum number of connections that can be allocated by the pool at a given
#        # time. Use a negative value for no limit.
#        max-active: 20
#        # 连接池中分配连接时的最大阻塞时间，使用负数无限阻塞
#        # Maximum amount of time a connection allocation should block before throwing an
#        # exception when the pool is exhausted. Use a negative value to block indefinitely.
#        max-wait: -1ms
#        # 连接池中最大空闲连接，默认8
#        max-idle: 8
#        # 连接池中最小空闲连接，默认0
#        min-idle: 5
  cloud:
    gateway:
      routes:
        # 测试相关参数
        # 路由的ID
        - id: path_route
          # 匹配后的路由地址
#          uri: ${service-url.user1-service}
          # 使用lb协议，才能启用Gateway的负载均衡功能，根据微服务名称拉取请求路径
          uri: lb://user-service
          # 断言
          predicates:
            # 路由相匹配的进行路由, 转发地址格式为 uri/test/test1
            - Path=/api/v1/test/test1
            # 在指定时间之后的请求才会被转发
#            - After=2021-01-14T16:37:00+08:00[Asia/Shanghai]

            # 在指定时间之前的请求才会被转发
#            - Before=2021-01-14T16:39:00+08:00[Asia/Shanghai]

            # 在指定时间区间内的请求才会被转发
            - Between=2021-01-14T16:39:00+08:00[Asia/Shanghai],2021-05-14T16:41:00+08:00[Asia/Shanghai]

            # 带有cookie为 jargon=helmet 的请求可以匹配该路由
            # 接收两个参数，一个是 Cookie name , 一个是正则表达式，路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行。
#            - Cookie=jargon,helmet
            # 接收两个参数，一个是 Cookie name , 一个是正则表达式，X-Request-Id:123
            - Header=X-Request-Id, \d+
            # 带有指定Host的请求会匹配该路由
            - Host=**.haha.com
          filters:
            # 给请求添加参数的过滤器
            - AddRequestParameter=red, blue
            # 对指定数量的路径前缀进行去除的过滤器，当匹配到 /api/v1/test/test1 时，实际会转发到 uri/test/test1
            - StripPrefix=2

        # 测试添加uri前缀
        - id: path_route3
          # 根据微服务名称拉取请求路径
          uri: lb://user-service
          predicates:
            # 路由相匹配的进行路由, 转发地址格式为 uri/test/test1
            - Path=/test3
          filters:
            # 添加前缀
            - PrefixPath=/test

        # 测试限流
        - id: path_route-rate-limiter
          uri: lb://user-service
          predicates:
            - Path=/test/test4
            - Method=GET
          filters:
            - name: RequestRateLimiter
              args:
                # 使用SpEL从Spring容器中获取对应的限流策略Bean
#                key-resolver: "#{@ipKeyResolver}"
                key-resolver: "#{@userKeyResolver}"
                # 令牌桶每秒填充的速率，即每秒允许处理的请求数量
                redis-rate-limiter.replenishRate: 1
                # 令牌桶的容量，即每秒最大处理的请求数量（允许一定程度的突发调用）
                redis-rate-limiter.burstCapacity: 2

        # 测试重试
        - id: path_route-retry
          uri: lb://user-service
          predicates:
            - Path=/test/test5
            - Method=GET
          filters:
            - name: Retry
              args:
                retries: 1 #需要进行重试的次数
                statuses: BAD_GATEWAY #返回哪个状态码需要进行重试，返回状态码为5XX进行重试
                backoff:
                  firstBackoff: 10ms
                  maxBackoff: 50ms
                  factor: 2
                  basedOnPreviousValue: false
      discovery:
        locator:
          # 开启根据微服务名称自动转发
          enabled: true
          # 微服务名称小写呈现
          lower-case-service-id: true
eureka:
  client:
    service-url:
      defaultZone: http://localhost:9761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"

logging:
  level:
    org: debug
